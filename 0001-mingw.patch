diff --git a/CMakeLists.txt b/CMakeLists.txt
index d61c868..4b7cdd7 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -19,5 +19,3 @@ project(fswatch)
 set(CMAKE_CXX_STANDARD 11)
 
 add_subdirectory(libfswatch)
-add_subdirectory(fswatch/src)
-add_subdirectory(test/src)
\ No newline at end of file
diff --git a/fswatch/src/fswatch.cpp b/fswatch/src/fswatch.cpp
index 445b939..7aefddc 100644
--- a/fswatch/src/fswatch.cpp
+++ b/fswatch/src/fswatch.cpp
@@ -36,6 +36,9 @@
 #include "libfswatch/c/libfswatch.h"
 #include "libfswatch/c/libfswatch_log.h"
 #include "libfswatch/c++/libfswatch_exception.hpp"
+#ifdef _WIN32
+#define realpath(N,R) _fullpath((R),(N),_MAX_PATH)
+#endif
 
 #ifdef HAVE_GETOPT_LONG
 #  include <getopt.h>
@@ -297,6 +300,7 @@ static bool validate_latency(double latency)
 
 static void register_signal_handlers()
 {
+#ifndef _WIN32
   struct sigaction action;
   action.sa_handler = close_handler;
   sigemptyset(&action.sa_mask);
@@ -328,6 +332,7 @@ static void register_signal_handlers()
   {
     std::cerr << _("SIGINT handler registration failed") << std::endl;
   }
+#endif
 }
 
 static void print_event_path(const event& evt)
diff --git a/libfswatch/CMakeLists.txt b/libfswatch/CMakeLists.txt
index a7d9503..c510fe4 100644
--- a/libfswatch/CMakeLists.txt
+++ b/libfswatch/CMakeLists.txt
@@ -79,9 +79,6 @@ if (HAVE_PORT_H)
 endif (HAVE_PORT_H)
 
 if (WIN32)
-    CHECK_INCLUDE_FILES(sys/cygwin.h HAVE_CYGWIN)
-
-    if (HAVE_CYGWIN)
         set(LIB_SOURCE_FILES
                 ${LIB_SOURCE_FILES}
                 src/libfswatch/c++/windows/win_directory_change_event.cpp
@@ -97,7 +94,6 @@ if (WIN32)
                 src/libfswatch/c++/windows_monitor.cpp
                 src/libfswatch/c++/windows_monitor.hpp)
         add_definitions(-DHAVE_WINDOWS)
-    endif (HAVE_CYGWIN)
 endif (WIN32)
 
 if (APPLE)
@@ -118,3 +114,13 @@ endif (APPLE)
 add_library(libfswatch ${LIB_SOURCE_FILES})
 target_include_directories(libfswatch PUBLIC src)
 target_link_libraries(libfswatch ${CORESERVICES_LIBRARY})
+
+install(TARGETS libfswatch
+        RUNTIME DESTINATION bin
+        LIBRARY DESTINATION lib
+        ARCHIVE DESTINATION lib)
+
+install(DIRECTORY src/libfswatch DESTINATION include
+        FILES_MATCHING PATTERN "*.h")
+install(DIRECTORY src/libfswatch DESTINATION include
+        FILES_MATCHING PATTERN "*.hpp")
diff --git a/libfswatch/src/libfswatch/c++/path_utils.cpp b/libfswatch/src/libfswatch/c++/path_utils.cpp
index 9776047..26d1322 100644
--- a/libfswatch/src/libfswatch/c++/path_utils.cpp
+++ b/libfswatch/src/libfswatch/c++/path_utils.cpp
@@ -58,13 +58,21 @@ namespace fsw
 
   bool read_link_path(const string& path, string& link_path)
   {
+#ifdef _WIN32
+    return false;
+#else
     link_path = fsw_realpath(path.c_str(), nullptr);
 
     return true;
+#endif
   }
 
   std::string fsw_realpath(const char *path, char *resolved_path)
   {
+#ifdef _WIN32
+    fsw_logf_perror(_("Cannot lstat %s (not implemented on Windows)"), path);
+    return path;
+#else
     char *ret = realpath(path, resolved_path);
 
     if (ret == nullptr)
@@ -80,24 +88,28 @@ namespace fsw
     if (resolved_path == nullptr) free(ret);
 
     return resolved;
+#endif
   }
 
   bool stat_path(const string& path, struct stat& fd_stat)
-  {
-    if (stat(path.c_str(), &fd_stat) == 0)
-      return true;
-
+  {    
+#ifdef _WIN32
     fsw_logf_perror(_("Cannot stat %s"), path.c_str());
     return false;
-
+#else
+    if (stat(path.c_str(), &fd_stat) == 0)
+      return true;
+#endif
   }
 
   bool lstat_path(const string& path, struct stat& fd_stat)
   {
-    if (lstat(path.c_str(), &fd_stat) == 0)
-      return true;
-
+#ifdef _WIN32
     fsw_logf_perror(_("Cannot lstat %s"), path.c_str());
     return false;
+#else
+    if (lstat(path.c_str(), &fd_stat) == 0)
+      return true;
+#endif
   }
 }
diff --git a/libfswatch/src/libfswatch/c++/poll_monitor.cpp b/libfswatch/src/libfswatch/c++/poll_monitor.cpp
index 25b5f8c..441a509 100644
--- a/libfswatch/src/libfswatch/c++/poll_monitor.cpp
+++ b/libfswatch/src/libfswatch/c++/poll_monitor.cpp
@@ -17,11 +17,19 @@
 #  include "libfswatch_config.h"
 #endif
 
+#ifdef _WIN32
+#  include <windows.h>
+#endif
+
 #include "gettext_defs.h"
 #include "poll_monitor.hpp"
+#ifdef HAVE_UNISTD_H
 #include <unistd.h>
+#endif
 #include <cstdlib>
+#ifdef HAVE_FCNTL_H
 #include <fcntl.h>
+#endif
 #include <iostream>
 #include <utility>
 #include "c/libfswatch_log.h"
@@ -36,6 +44,10 @@
 #  define FSW_CTIME(stat) (stat.st_ctimespec.tv_sec)
 #endif
 
+#if !defined(S_ISDIR) && defined(S_IFMT) && defined(S_IFDIR)
+#define S_ISDIR(m) (((m) & S_IFMT) == S_IFDIR)
+#endif
+
 namespace fsw
 {
   using std::vector;
@@ -127,6 +139,7 @@ namespace fsw
     struct stat fd_stat;
     if (!lstat_path(path, fd_stat)) return;
 
+#ifndef _WIN32
     if (follow_symlinks && S_ISLNK(fd_stat.st_mode))
     {
       string link_path;
@@ -135,6 +148,7 @@ namespace fsw
 
       return;
     }
+#endif
 
     if (!accept_path(path)) return;
     if (!add_path(path, fd_stat, fn)) return;
@@ -206,7 +220,11 @@ namespace fsw
 
       FSW_ELOG(_("Done scanning.\n"));
 
+#ifdef _WIN32
+      Sleep(latency < MIN_POLL_LATENCY ? (MIN_POLL_LATENCY * 1000): (latency * 1000));
+#else
       sleep(latency < MIN_POLL_LATENCY ? MIN_POLL_LATENCY : latency);
+#endif
 
       time(&curr_time);
 
diff --git a/libfswatch/src/libfswatch/c++/windows/win_paths.cpp b/libfswatch/src/libfswatch/c++/windows/win_paths.cpp
index 3b15db8..ca0b00e 100644
--- a/libfswatch/src/libfswatch/c++/windows/win_paths.cpp
+++ b/libfswatch/src/libfswatch/c++/windows/win_paths.cpp
@@ -14,7 +14,11 @@
  * this program.  If not, see <http://www.gnu.org/licenses/>.
  */
 #include "win_paths.hpp"
+#ifdef  __CYGWIN__
 #include <sys/cygwin.h>
+#else
+#include <windows.h>
+#endif
 #include "../libfswatch_exception.hpp"
 #include "../../gettext_defs.h"
 
@@ -26,6 +30,7 @@ namespace fsw
   {
     wstring posix_to_win_w(string path)
     {
+#ifdef  __CYGWIN__
       void * raw_path = cygwin_create_path(CCP_POSIX_TO_WIN_W, path.c_str());
       if (raw_path == nullptr) throw libfsw_exception(_("cygwin_create_path could not allocate memory to convert the path."));
 
@@ -34,10 +39,20 @@ namespace fsw
       free(raw_path);
 
       return win_path;
+#else
+      int pathlen = (int)path.length() + 1;
+      int buflen = MultiByteToWideChar(CP_ACP, 0, path.c_str(), pathlen, 0, 0);
+      wchar_t* buf = new wchar_t[buflen];
+      MultiByteToWideChar(CP_ACP, 0, path.c_str(), pathlen, buf, buflen);
+      std::wstring result(buf);
+      delete[] buf;
+      return result;
+#endif
     }
 
     string win_w_to_posix(wstring path)
     {
+#ifdef  __CYGWIN__
       void * raw_path = cygwin_create_path(CCP_WIN_W_TO_POSIX, path.c_str());
       if (raw_path == nullptr) throw libfsw_exception(_("cygwin_create_path could not allocate memory to convert the path."));
 
@@ -46,6 +61,15 @@ namespace fsw
       free(raw_path);
 
       return posix_path;
+#else
+      int pathlen = (int)path.length() + 1;
+      int buflen = WideCharToMultiByte(CP_ACP, 0, path.c_str(), pathlen, 0, 0, 0, 0);
+      char* buf = new char[buflen];
+      WideCharToMultiByte(CP_ACP, 0, path.c_str(), pathlen, buf, buflen, 0, 0);
+      std::string result(buf);
+      delete[] buf;
+      return result;
+#endif
     }
   }
 }
diff --git a/libfswatch/src/libfswatch/c++/windows/win_strings.cpp b/libfswatch/src/libfswatch/c++/windows/win_strings.cpp
index 0963762..5a5de1d 100644
--- a/libfswatch/src/libfswatch/c++/windows/win_strings.cpp
+++ b/libfswatch/src/libfswatch/c++/windows/win_strings.cpp
@@ -25,7 +25,7 @@ namespace fsw
     string wstring_to_string(wchar_t * s)
     {
       int buf_size = WideCharToMultiByte(CP_UTF8, 0, s, -1, NULL, 0, NULL, NULL);
-      char buf[buf_size];
+      char buf[1024];
       WideCharToMultiByte(CP_UTF8, 0, s, -1, buf, buf_size, NULL, NULL);
 
       return string(buf);
diff --git a/libfswatch/src/libfswatch/c++/windows_monitor.cpp b/libfswatch/src/libfswatch/c++/windows_monitor.cpp
index cdd9d70..fff920c 100644
--- a/libfswatch/src/libfswatch/c++/windows_monitor.cpp
+++ b/libfswatch/src/libfswatch/c++/windows_monitor.cpp
@@ -29,13 +29,19 @@
 #  include <set>
 #  include <iostream>
 #  include <memory>
-#  include <sys/types.h>
+#  ifdef HAVE_SYS_TYPES_H
+#    include <sys/types.h>
+#  endif
 #  include <cstdlib>
 #  include <cstring>
 #  include <ctime>
 #  include <cstdio>
-#  include <unistd.h>
-#  include <fcntl.h>
+#  ifdef HAVE_UNISTD_H
+#      include <unistd.h>
+#  endif
+#  ifdef HAVE_FCNTL_H
+#    include <fcntl.h>
+#  endif
 #  include <windows.h>
 #  include "./windows/win_handle.hpp"
 #  include "./windows/win_error_message.hpp"
@@ -233,7 +239,11 @@ namespace fsw
       run_guard.unlock();
 #endif
 
+#ifdef _WIN32
+      Sleep(latency * 1000);
+#else
       sleep(latency);
+#endif
 
       for (const auto & path : load->win_paths)
       {
